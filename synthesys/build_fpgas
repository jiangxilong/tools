eval 'exec `which perl` -S $0 ${1+"$@"}'
   if 0;

#/**********************************************************************/
#/*                                                                    */
#/*             -------                                                */
#/*            /   SOC  \                                              */
#/*           /    GEN   \                                             */
#/*          /    TOOL    \                                            */
#/*          ==============                                            */
#/*          |            |                                            */
#/*          |____________|                                            */
#/*                                                                    */
#/*                                                                    */
#/*                                                                    */
#/*  Author(s):                                                        */
#/*      - John Eaton, jt_eaton@opencores.org                          */
#/*                                                                    */
#/**********************************************************************/
#/*                                                                    */
#/*    Copyright (C) <2010-2011>  <Ouabache Design Works>              */
#/*                                                                    */
#/*  This source file may be used and distributed without              */
#/*  restriction provided that this copyright statement is not         */
#/*  removed from the file and that any derivative work contains       */
#/*  the original copyright notice and the associated disclaimer.      */
#/*                                                                    */
#/*  This source file is free software; you can redistribute it        */
#/*  and/or modify it under the terms of the GNU Lesser General        */
#/*  Public License as published by the Free Software Foundation;      */
#/*  either version 2.1 of the License, or (at your option) any        */
#/*  later version.                                                    */
#/*                                                                    */
#/*  This source is distributed in the hope that it will be            */
#/*  useful, but WITHOUT ANY WARRANTY; without even the implied        */
#/*  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR           */
#/*  PURPOSE.  See the GNU Lesser General Public License for more      */
#/*  details.                                                          */
#/*                                                                    */
#/*  You should have received a copy of the GNU Lesser General         */
#/*  Public License along with this source; if not, download it        */
#/*  from http://www.opencores.org/lgpl.shtml                          */
#/*                                                                    */
#/**********************************************************************/


############################################################################
# General PERL config
############################################################################
use Getopt::Long;
use English;
use File::Basename;
use Cwd;
use XML::LibXML;
use lib './tools';
use sys::lib;
use yp::lib;
use Parallel::ForkManager;

$OUTPUT_AUTOFLUSH = 1; # set autoflush of stdout to TRUE.


############################################################################
### Process the options
############################################################################
Getopt::Long::config("require_order", "prefix=-");
GetOptions("h","help",
) || die "(use '$program_name -h' for help)";




##############################################################################
## Help option
##############################################################################
if ( $opt_h or $opt_help  ) 
  { print "\n build_fpgas vendor__library";
    print "\n";
    exit 1;
  }


#/**********************************************************************/
#/*  Process each library by finding any ip-xact file in any component */
#/*                                                                    */
#/*  Each ip-xact file is parsed and it's filename and the names of any*/
#/*  modules that it uses are saved.                                   */
#/*                                                                    */
#/*                                                                    */
#/**********************************************************************/

my $prefix = yp::lib::get_workspace();


my $vendor ;
my $library  ;

$_        = $ARGV[0];

   if(/(\S+)__(\S+)/) 
     { 
     $vendor           = $1;
     $library          = $2;
     }

my $home              = cwd();


my $parser = XML::LibXML->new();


my @components   = yp::lib::find_components($vendor,$library);

foreach my $component (@components) 
   {
   my $socgen_filename     = yp::lib::find_componentConfiguration($vendor,$library,$component);

  if($socgen_filename)

   {
   my $socgen_file     = $parser->parse_file($socgen_filename);


   my $syn_library_path ;
   my $lib_comp_sep             = yp::lib::find_lib_comp_sep($vendor,$library,$component);
   my $syn_comp_path            = $socgen_file->findnodes("//socgen:componentConfiguration/socgen:syn/socgen:comp_path/text()")->to_literal;

   if ($syn_comp_path)
      {
      $syn_library_path            ="${lib_comp_sep}${syn_comp_path}";
      }
   else
      {
      $syn_library_path            = $socgen_file->findnodes("//socgen:componentConfiguration/socgen:syn/socgen:library_path/text()")->to_literal;
      }

   print "XXXX-   $vendor $library $component  $syn_library_path   \n";















   #/*********************************************************************************************/
   #/   files for simulation                                                                     */
   #/                                                                                            */
   #/*********************************************************************************************/
my $cmd;
my @cmds =();
my $manager = new Parallel::ForkManager( 6 );


   foreach  my   $i_name ($socgen_file->findnodes("//socgen:componentConfiguration/socgen:syn/socgen:ise/socgen:chip/socgen:variant"))
      {
      my($chip_name)     = $i_name ->findnodes('./text()')->to_literal ;
      my($chip_part)  = $i_name ->findnodes('../socgen:target/socgen:part/text()')->to_literal ;
      print "  FPGAs     $chip_name       $chip_part    \n"; 
      $cmd ="./tools/synthesys/run_ise   $vendor $library $syn_library_path  $chip_name    $chip_part       \n";
      push @cmds,$cmd;
      }

    foreach $cmd (@cmds)
      {
      $manager->start and next;
      system($cmd);
      $manager->finish;
      }

   $manager->wait_all_children;
    print "build_fpgas COMPLETE \n";

   }

}



